[
  {
    "objectID": "fallingc.html",
    "href": "fallingc.html",
    "title": "Falling_nbdev",
    "section": "",
    "text": "from nbdev.showdoc import *\n\n\n#import relevant libraries: pip install re, pip install natsort, pip install plotly==5.10.0\nimport sys\nimport os\nimport glob\n\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\nimport matplotlib as mpl\nimport datetime as dt8\nimport math\nimport matplotlib.pyplot as plt\nimport decimal\nimport re\nfrom natsort import index_natsorted\nimport dabest\n\nimport NLCLIMB \nimport NLGRAPHS\n\nimport plotly.express as px \nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\n#NOTE: SUPPRESSES WARNINGS!\n\nimport warnings\n\nwarnings.simplefilter(action=\"ignore\", category=RuntimeWarning)\n\n\n#initial file processing\n#openPath = \"D:\\\\Nicole Lee - HDD\\\\ACC Lab Dropbox\\\\ACC Lab\\\\Nicole Lee\\\\DATA\\\\Falling\\\\Compilation\\\\\"\nopenPath = \"C:\\\\Users\\\\lnico\\\\ACC Lab Dropbox\\\\ACC Lab\\\\Nicole Lee\\\\DATA\\\\Falling\\\\Compilation\\\\\"\n#openPath = \"D:\\\\ACC Lab Dropbox\\\\ACC Lab\\\\Nicole Lee\\\\DATA\\\\Falling\\\\Compilation\\\\\"\n\nfiles = os.listdir(openPath)\n\n#identifying genotypes\nresponder = \"eOPN3\"\ndriver = \"ChAT-GFP\"\nwt = \"w1118\"\ntransgenic = driver + \" x \" + responder\nfilename = openPath + transgenic + \".csv\"\nfilenamewt = openPath + wt+\"_\"+ transgenic + \".csv\"\n\nprint(filename)\nprint(filenamewt)\n\nC:\\Users\\lnico\\ACC Lab Dropbox\\ACC Lab\\Nicole Lee\\DATA\\Falling\\Compilation\\ChAT-GFP x eOPN3.csv\nC:\\Users\\lnico\\ACC Lab Dropbox\\ACC Lab\\Nicole Lee\\DATA\\Falling\\Compilation\\w1118_ChAT-GFP x eOPN3.csv\n\n\n\ndfe=pd.read_csv(filename)\ndfw= pd.read_csv(filenamewt)\n\nexptdf = dfe.drop(dfe.columns[[0]],axis = 1)\nwtdf = dfw.drop(dfw.columns[[0]],axis = 1)\n\n\nprint(\"FPS= \", NLCLIMB.frames(wtdf))\nprint(wtdf)\n\nFPS=  5\n     Seconds           ExperimentState  w1118 X_1  w1118 Y_1  w1118 X_2  \\\n0        0.0  Assimilation time - Dark    1.93158   12.56164    2.58748   \n1        0.2  Assimilation time - Dark    1.77562   14.67088    2.34556   \n2        0.4  Assimilation time - Dark    2.32918   16.89436    1.66334   \n3        0.6  Assimilation time - Dark    2.75548   19.12386    1.78612   \n4        0.8  Assimilation time - Dark    3.47088   21.44086    2.07942   \n..       ...                       ...        ...        ...        ...   \n225     45.0                      Full    3.53276   81.73046    7.56280   \n226     45.2                      Full    3.53276   81.73228    7.58086   \n227     45.4                      Full    3.55110   81.69966    7.58842   \n228     45.6                      Full    3.54256   81.71982    7.58506   \n229     45.8                      Full    3.55852   81.70064    7.58338   \n\n     w1118 Y_2  w1118 X_3  w1118 Y_3  w1118 X_4  w1118 Y_4  ...  w1118 X_180  \\\n0     14.50540    5.51222   15.88216    1.66432   20.17666  ...          NaN   \n1     17.09176    5.51516   17.83880    2.00382   22.15024  ...      4.27644   \n2     19.30642    5.37460   19.72222    2.47646   24.10226  ...      4.20126   \n3     20.75248    5.57158   21.34664    3.10730   26.13730  ...      4.08716   \n4     21.29890    6.01090   23.26128    4.01436   28.18032  ...      4.29786   \n..         ...        ...        ...        ...        ...  ...          ...   \n225   40.41296    6.71300   44.07312    1.72788   79.91914  ...      5.56388   \n226   40.41842    6.76326   44.00326    1.78234   79.67526  ...      5.29634   \n227   40.43634    6.82346   44.05296    1.88300   79.59812  ...      5.49640   \n228   40.41926    6.89150   44.08418    2.00410   79.65664  ...      5.74140   \n229   40.42738    6.74548   44.11582    2.25498   79.65426  ...      5.42122   \n\n     w1118 Y_180  w1118 X_181  w1118 Y_181  w1118 X_182  w1118 Y_182  \\\n0            NaN          NaN          NaN          NaN          NaN   \n1       41.10946      6.42166      5.85200      0.39928      3.21902   \n2       44.47212      5.09866      0.68908      0.51716      5.81350   \n3       48.24946      4.52774      1.29934      0.48160      8.53664   \n4       52.14314      4.83490      3.99672      0.55650     11.70988   \n..           ...          ...          ...          ...          ...   \n225     86.87672      3.07580     87.43882      2.15908     84.48580   \n226     87.16876      3.05550     87.43462      2.16664     84.28252   \n227     87.50000      3.07706     87.38100      2.20178     83.74716   \n228     87.58876      3.04836     87.41684      2.56844     83.28586   \n229     87.42916      3.04864     87.37876      2.75548     82.96848   \n\n     w1118 X_183  w1118 Y_183  w1118 X_184  w1118 Y_184  \n0            NaN          NaN          NaN          NaN  \n1        3.12410     26.70570      1.38754      1.32538  \n2        3.65806     29.84016      1.24796      2.70326  \n3        4.39978     33.52566      0.70574      5.00948  \n4        4.79528     36.80950      0.63658      6.59232  \n..           ...          ...          ...          ...  \n225      3.98762     87.81080      3.67752     87.49090  \n226      3.73660     87.66520      3.40984     86.87350  \n227      4.15212     87.62866      4.18866     86.66602  \n228      4.64016     87.27516      6.26878     86.78572  \n229      3.80002     87.25598      6.90872     87.04220  \n\n[230 rows x 370 columns]\n\n\n\ndfexpt = NLCLIMB.generation(exptdf, driver)\ndfwt = NLCLIMB.generation(wtdf, wt)\n\n\nDabest plots\n\ndfe_dark = dfexpt[(dfexpt['ExperimentState']== 'Dark')] \ndfe_full = dfexpt[(dfexpt['ExperimentState']== 'Full')] \n\ndfw_dark = dfwt[(dfwt['ExperimentState']== 'Dark')] \ndfw_full = dfwt[(dfwt['ExperimentState']== 'Full')]\n\n\nnnumberexpt = len(dfe_dark.filter(regex=\"Fall.*\").sum(axis=0))\nnnumberwt = len(dfw_dark.filter(regex=\"Fall.*\").sum(axis=0))\n\nfiltered = (dfe_dark.filter(regex=\"Fall.*\").sum(axis=0))/1\nfiltered2 = (dfe_full.filter(regex=\"Fall.*\").sum(axis=0))/1\nfiltered3 = (dfw_dark.filter(regex=\"Fall.*\").sum(axis=0))/1\nfiltered4 = (dfw_full.filter(regex=\"Fall.*\").sum(axis=0))/1\n\nawt=pd.DataFrame()\nawt['Falls']=filtered\nawt['ExperimentState'] = \"Dark\"\n\nawt2=pd.DataFrame()\nawt2['Falls']=filtered2\nawt2['ExperimentState'] = \"Full\"\n\nawt2b = pd.concat([awt, awt2]).reset_index()\nawt2b[\"Type\"] = \"Expt\"\n\nawt3=pd.DataFrame()\nawt3['Falls']=filtered3\nawt3['ExperimentState'] = \"Dark\"\n\nawt4=pd.DataFrame()\nawt4['Falls']=filtered4\nawt4['ExperimentState'] = \"Full\"\nawt4b = pd.concat([awt3, awt4]).reset_index()\nawt4b[\"Type\"] = \"WT\"\n\nawt5=pd.DataFrame()\nawt5 = pd.concat([awt2b, awt4b])\n\n\ndeltaplots = dabest.load(data=awt5, x=[\"ExperimentState\",\"Type\"], y=\"Falls\", delta2 = True, experiment=\"Type\", experiment_label = [\"WT\", \"Expt\"], x1_level = [\"Dark\",\"Full\"], paired = \"sequential\", id_col = \"index\")\n\ndeltaplots.mean_diff.plot(swarm_label=\"Falling occurence\",\n                                     contrast_label=\"Δ falling\", raw_marker_size=2, es_marker_size=10, swarm_ylim=(0,5), contrast_ylim=(-1, 1));\n\nC:\\Users\\lnico\\anaconda3\\lib\\site-packages\\scipy\\stats\\morestats.py:3141: UserWarning:\n\nExact p-value calculation does not work if there are ties. Switching to normal approximation.\n\nC:\\Users\\lnico\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning:\n\nThis figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n\n\n\n\n\n\n\ndf_se = NLCLIMB.velodabest(dfexpt, \"Expt\", \"Velocity.*\")\ndf_sw = NLCLIMB.velodabest(dfwt, \"WT\", \"Velocity.*\")\n\nfgt6=pd.DataFrame()\nfgt6 = pd.concat([df_se, df_sw]).reset_index()\n\n\ndeltaplots2 = dabest.load(data=fgt6, x=[\"ExperimentState\",\"Type\"], y=\"Velocity\", delta2 = True, experiment=\"Type\", experiment_label = [\"WT\", \"Expt\"], x1_level = [\"Dark\",\"Full\"], paired = \"sequential\", id_col = \"index\")\n\ndeltaplots2.mean_diff.plot(swarm_label=\"Speed (mm/s)\",\n                                     contrast_label=\"Δ Speed\",  es_marker_size=10, swarm_ylim=(0,20), contrast_ylim=(-10, 10));\n\nC:\\Users\\lnico\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n  fig.canvas.print_figure(bytes_io, **kw)\n\n\n\n\n\n\n\nTOTAL calculations for graphs\n\n#Y position\ndf_de = NLCLIMB.calcgraph(dfexpt,\"Y.*\")\ndf_meande=NLCLIMB.meangraph(df_de)\ndf_dw = NLCLIMB.calcgraph(dfwt,\"Y.*\")\ndf_meandw=NLCLIMB.meangraph(df_dw)\n\n#speed\ndf_se = NLCLIMB.calcgraph(dfexpt, \"Velocity.*\")\ndf_meanse = NLCLIMB.meangraph(df_se)\ndf_sw = NLCLIMB.calcgraph(dfwt, \"Velocity.*\")\ndf_meansw = NLCLIMB.meangraph(df_sw)\n\n#Falling\ndf_fed = NLCLIMB.fallcalc(dfexpt, \"Dark\")\ndf_fel = NLCLIMB.fallcalc(dfexpt, \"Full\")\ndf_fwd = NLCLIMB.fallcalc(dfwt, \"Dark\")\ndf_fwl = NLCLIMB.fallcalc(dfwt, \"Full\")\n\n#violinplots\ndf_vfwd = NLCLIMB.violinfall(dfwt, \"Dark\")\ndf_vfed = NLCLIMB.violinfall(dfexpt, \"Dark\")\ndf_vfwf = NLCLIMB.violinfall(dfwt, \"Full\")\ndf_vfef = NLCLIMB.violinfall(dfexpt, \"Full\")\n\n\n\nY position\n\nfig1=NLGRAPHS.individualpos(df_dw, df_de, transgenic)\nfig1.show()\n\n\n                                                \n\n\n\nfig2=NLGRAPHS.yposmean(df_meande, df_meandw, transgenic)\nfig2.show()\n\n\n                                                \n\n\n\n\nSpeed\n\nfig3 = NLGRAPHS.individualspeed(df_se, df_sw, transgenic)\nfig3.show()\n\n\n                                                \n\n\n\nfig4 = NLGRAPHS.speedmeangraph(df_meanse, df_meansw, transgenic)\nfig4.show()\n\n\n                                                \n\n\n\n\nFalling\n\nfig5 = NLGRAPHS.fallingraph(df_fwd, df_fwl, df_fed, df_fel, df_meanded, df_meandel, df_meandwd, df_meandwl, transgenic, showpos = True)\nfig5.show()\n\n\n                                                \n\n\n\n\nViolin plots\n\n#must follow the order of wtdark, exptdark, wtfull, exptfull\nfig6 = NLGRAPHS.violinfallgraph(df_vfwd, df_vfed, df_vfwf, df_vfef, transgenic)\nfig6.show()\n\n\n                                                \n\n\n\n\nRaster\n\ndt = pd.DataFrame()\ndt['Seconds']= dfexpt[(dfexpt['ExperimentState'] == 'Dark')['Seconds']\n\ndffall = dfexpt[(dfexpt['ExperimentState'] == 'Dark') | (dfexpt['ExperimentState']== 'Full')].filter(regex=\"Fall.*\")\ndffall = pd.concat([dfexpt.iloc[:,0:2], dffall], axis=1)\ndf_test = dffall.copy()\nfor r in dffall.iloc[:,2:].columns:\n    df_temp = pd.DataFrame()\n    df_temp['Time ' + r] = [0]*len(dffall)\n    df_test = pd.concat([df_test,df_temp], axis = 1)\n    df_test.loc[(dffall[r]>0), ['Time ' +r]] = df_test['Seconds']\ndf_test= df_test.filter(regex=\"Time .*\")\ndfuu = pd.melt(df_test)\ndfu2 = dfuu[dfuu['value'] > 0].reset_index(drop=True)\n\n\ndt1 = pd.DataFrame()\ndt1= dfexpt[(dfexpt['ExperimentState'] == 'Dark')]\ndt1['Seconds'] -=3\ndt1.reset_index(drop=True)\n\nC:\\Users\\lnico\\AppData\\Local\\Temp\\ipykernel_23612\\1028196802.py:3: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n\n\n\n\n\n\n  \n    \n      \n      Seconds\n      ExperimentState\n      ChAT-GFP X_1\n      ChAT-GFP Y_1\n      Fall_1\n      Velocity_1\n      ChAT-GFP X_2\n      Fall_3\n      Velocity_3\n      ChAT-GFP X_4\n      ...\n      ChAT-GFP X_26\n      ChAT-GFP Y_26\n      Fall_26\n      Velocity_26\n      ChAT-GFP X_27\n      ChAT-GFP Y_27\n      Fall_27\n      Velocity_27\n      ChAT-GFP X_28\n      ChAT-GFP Y_28\n    \n  \n  \n    \n      0\n      0.0\n      Dark\n      3.48852\n      50.67776\n      0.0\n      16.800006\n      1.22556\n      0.0\n      13.400130\n      7.63504\n      ...\n      4.49596\n      23.51048\n      0.0\n      6.782968\n      3.67654\n      14.84000\n      0.0\n      6.576877\n      4.04026\n      46.41672\n    \n    \n      1\n      0.2\n      Dark\n      1.94040\n      53.19692\n      0.0\n      14.784149\n      1.28604\n      0.0\n      13.426895\n      7.72534\n      ...\n      5.51250\n      25.17410\n      0.0\n      9.748058\n      3.76586\n      16.16132\n      0.0\n      6.621678\n      3.59408\n      48.50734\n    \n    \n      2\n      0.4\n      Dark\n      2.46078\n      55.57258\n      0.0\n      12.159930\n      1.40364\n      0.0\n      8.442830\n      7.69636\n      ...\n      6.25352\n      26.82988\n      0.0\n      9.070168\n      4.43282\n      17.40718\n      0.0\n      7.065767\n      3.75032\n      49.90832\n    \n    \n      3\n      0.6\n      Dark\n      3.51358\n      58.23552\n      0.0\n      14.317504\n      2.03266\n      0.0\n      12.138592\n      7.73598\n      ...\n      6.46870\n      28.41706\n      0.0\n      8.008500\n      5.27002\n      18.55504\n      0.0\n      7.103672\n      4.33930\n      51.34654\n    \n    \n      4\n      0.8\n      Dark\n      4.68006\n      60.55462\n      0.0\n      12.979696\n      2.69766\n      0.0\n      14.985753\n      7.69090\n      ...\n      6.55984\n      29.66726\n      0.0\n      6.267588\n      5.27128\n      18.73172\n      0.0\n      0.883422\n      5.02544\n      52.88794\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      95\n      19.0\n      Dark\n      5.25784\n      85.80782\n      0.0\n      -0.047150\n      4.91176\n      0.0\n      0.166613\n      2.66938\n      ...\n      2.99964\n      26.57102\n      0.0\n      0.321575\n      5.40372\n      18.46236\n      0.0\n      -0.126253\n      2.90108\n      65.01194\n    \n    \n      96\n      19.2\n      Dark\n      5.25798\n      85.82182\n      0.0\n      0.070003\n      4.93696\n      0.0\n      0.095693\n      2.81568\n      ...\n      2.94070\n      26.53518\n      0.0\n      -0.344907\n      5.40372\n      18.45270\n      0.0\n      -0.048300\n      2.88750\n      64.99136\n    \n    \n      97\n      19.4\n      Dark\n      5.25392\n      85.84520\n      0.0\n      0.118649\n      4.90868\n      0.0\n      -0.317849\n      2.73336\n      ...\n      2.94882\n      26.52300\n      0.0\n      -0.073193\n      5.40694\n      18.46068\n      0.0\n      0.043026\n      2.88414\n      64.98030\n    \n    \n      98\n      19.6\n      Dark\n      5.26792\n      85.83974\n      0.0\n      -0.075135\n      4.89020\n      0.0\n      -0.143220\n      2.40268\n      ...\n      4.98260\n      3.72778\n      1.0\n      NaN\n      1.54000\n      0.98000\n      1.0\n      NaN\n      6.78104\n      2.05926\n    \n    \n      99\n      19.8\n      Dark\n      5.27002\n      85.86186\n      0.0\n      0.111097\n      4.84666\n      0.0\n      -0.066056\n      2.48178\n      ...\n      4.35442\n      4.46978\n      0.0\n      4.861003\n      1.96000\n      1.21618\n      0.0\n      2.409258\n      6.81478\n      2.09132\n    \n  \n\n100 rows × 91 columns\n\n\n\n\ndf_re = NLCLIMB.rastergraph(dfexpt)\ndf_rw = NLCLIMB.rastergraph(dfwt)\n\n\ndf_re['Type'] = \"EXPT\"\ndf_rw['Type'] = \"WT\"\ndf_rr = pd.concat([df_rw, df_re]).reset_index(drop=True)\ndf_rr['list']= range(1,len(df_rr)+1)\ndf_rr\n\n\n\n\n\n  \n    \n      \n      variable\n      value\n      Type\n      list\n    \n  \n  \n    \n      0\n      Time Fall_17\n      3.0\n      WT\n      1\n    \n    \n      1\n      Time Fall_17\n      45.0\n      WT\n      2\n    \n    \n      2\n      Time Fall_27\n      13.6\n      WT\n      3\n    \n    \n      3\n      Time Fall_31\n      27.2\n      WT\n      4\n    \n    \n      4\n      Time Fall_49\n      22.6\n      WT\n      5\n    \n    \n      5\n      Time Fall_55\n      31.4\n      WT\n      6\n    \n    \n      6\n      Time Fall_55\n      31.6\n      WT\n      7\n    \n    \n      7\n      Time Fall_62\n      40.6\n      WT\n      8\n    \n    \n      8\n      Time Fall_107\n      38.2\n      WT\n      9\n    \n    \n      9\n      Time Fall_132\n      36.6\n      WT\n      10\n    \n    \n      10\n      Time Fall_139\n      32.2\n      WT\n      11\n    \n    \n      11\n      Time Fall_173\n      8.2\n      WT\n      12\n    \n    \n      12\n      Time Fall_174\n      11.0\n      WT\n      13\n    \n    \n      13\n      Time Fall_1\n      37.2\n      EXPT\n      14\n    \n    \n      14\n      Time Fall_4\n      27.4\n      EXPT\n      15\n    \n    \n      15\n      Time Fall_4\n      28.8\n      EXPT\n      16\n    \n    \n      16\n      Time Fall_5\n      28.8\n      EXPT\n      17\n    \n    \n      17\n      Time Fall_7\n      27.8\n      EXPT\n      18\n    \n    \n      18\n      Time Fall_8\n      27.4\n      EXPT\n      19\n    \n    \n      19\n      Time Fall_9\n      26.4\n      EXPT\n      20\n    \n    \n      20\n      Time Fall_11\n      27.2\n      EXPT\n      21\n    \n    \n      21\n      Time Fall_13\n      27.2\n      EXPT\n      22\n    \n    \n      22\n      Time Fall_14\n      27.0\n      EXPT\n      23\n    \n    \n      23\n      Time Fall_17\n      22.6\n      EXPT\n      24\n    \n    \n      24\n      Time Fall_20\n      22.6\n      EXPT\n      25\n    \n    \n      25\n      Time Fall_21\n      22.6\n      EXPT\n      26\n    \n    \n      26\n      Time Fall_22\n      22.6\n      EXPT\n      27\n    \n    \n      27\n      Time Fall_23\n      22.6\n      EXPT\n      28\n    \n    \n      28\n      Time Fall_23\n      31.0\n      EXPT\n      29\n    \n    \n      29\n      Time Fall_24\n      22.6\n      EXPT\n      30\n    \n    \n      30\n      Time Fall_24\n      27.4\n      EXPT\n      31\n    \n    \n      31\n      Time Fall_26\n      22.6\n      EXPT\n      32\n    \n    \n      32\n      Time Fall_26\n      29.2\n      EXPT\n      33\n    \n    \n      33\n      Time Fall_27\n      22.6\n      EXPT\n      34\n    \n    \n      34\n      Time Fall_27\n      33.4\n      EXPT\n      35\n    \n  \n\n\n\n\n\nfig = make_subplots(rows=2, cols=1, row_heights=[0.1, 0.85],shared_xaxes=True,vertical_spacing=0.03, horizontal_spacing = 0.03)\n\n#basic cartoon\nfig.add_trace(go.Scatter(x=[], y=[]),row=1, col=1)\nfig.add_shape(type=\"rect\",x0=0, y0=0, x1=20, y1=1,line=dict(color=\"black\",width=2,),fillcolor=\"#7f7f7f\",row=1,col=1)\nfig.add_shape(type=\"rect\",x0=20, y0=0, x1=40, y1=1,line=dict(color=\"black\",width=2,),fillcolor=\"green\",row=1,col=1)\nfig.update_xaxes(showgrid=False,zeroline=False,ticks=\"\",showline=False,showticklabels=False,range=[-0.05,20.05],row=1, col=1)\nfig.update_yaxes(showgrid=False,zeroline=False,ticks=\"\",showline=False,showticklabels=False,range=[-0.05,1.05],row=1, col=1)\n\n\nfig.add_trace(go.Scattergl(\n            name='Raster',\n            x=df_rr[(df_rr[\"Type\"] == \"WT\")]['value'],\n            y=df_rr[(df_rr[\"Type\"] == \"WT\")]['list'],\n            mode='markers',\n            marker=dict(color=\"#000\"),\n            showlegend=False\n        ), row=2, col=1)\n\nfig.add_trace(go.Scattergl(\n            name='Raster',\n            x=df_rr[(df_rr[\"Type\"] == \"EXPT\")]['value'],\n            y=df_rr[(df_rr[\"Type\"] == \"EXPT\")]['list'],\n            mode='markers',\n            marker=dict(color=\"#15b01a\"),\n            showlegend=False\n        ), row=2, col=1)\n\n\n\nfig.add_shape(type=\"line\",x0=20, y0=0, x1=20, y1=90,line=dict(color=\"black\",width=3,dash = \"dot\"),fillcolor=\"black\", row=2,col=1)\n              \nfig.update_yaxes(visible=False,range=[0,60],tickvals=np.arange(0,61,5),row=2,col=1)\nfig.update_xaxes(title='Seconds(s)',range=[0,46],tickvals=np.arange(0,47,5),row=2,col=1)\nfig.update_layout(title = driver + \"      Falling Occurence\", font=dict(family=\"ibm plex sans\",size=14,),height=400, width=1600, hovermode='x unified', showlegend=False, barmode = 'overlay')\nfig.show()"
  }
]